-------------------------------------------------------------------------------------------------------------------------
SETUP A NEW PROJECT (GUIDE)
git init
git remote origin 
link to chatgpt guide on initializing git https://chatgpt.com/c/67f8daf4-34d8-8008-8289-688bf43607be

$ mkdir -p bin cmd/api internal migrations remote
$ touch Makefile
$ touch cmd/api/main.go

The bin directory will contain our compiled application binaries, ready for deployment to a production server.
The cmd/api directory will contain the application-specific code for our Greenlight API application. This will include the code for running the server, reading and writing HTTP requests, and managing authentication.
The internal directory will contain various ancillary packages used by our API. It will contain the code for interacting with our database, doing data validation, sending emails and so on. Basically, any code which isn’t application-specific and can potentially be reused will live in here. Our Go code under cmd/api will import the packages in the internal directory (but never the other way around).
The migrations directory will contain the SQL migration files for our database.
The remote directory will contain the configuration files and setup scripts for our production server.
The go.mod file will declare our project dependencies, versions and module path.
The Makefile will contain recipes for automating common administrative tasks — like auditing our Go code, building binaries, and executing database migrations.

git status
git add . //from master branch
git push -u origin main

-------------------------------------------------------------------------------------------------------------------------
the server object returned by http.Server accepts a handler, this tells it the handler to call for all incoming requests,
the server listens on the port specified in its addr property and routes all requests received on this port to the handler
passed to the Handler property. The difference between this and http.listenAndServe is the http.Server allows us to define 
extra configuration for our server. The http.ListenAndServe uses default configurations for our server. The difference is
all in the granularity. The API confirms my theory.
func ListenAndServe(addr string, handler Handler) error {
	server := &Server{Addr: addr, Handler: handler}
	return server.ListenAndServe()
}
-------------------------------------------------------------------------------------------------------------------------
mux satisfies the handler interface, when the server receives a request on a port, it calls the servehttp method of mux.
the mux doesn't do anything with the request or response in particular, it simply calls a function, mux.Handler which 
takes the request as a parameter and returns the appropriate handler for the received request
-------------------------------------------------------------------------------------------------------------------------
API VERSIONING
APIs which support real-world businesses and users often need to change their functionality and endpoints over time — 
sometimes in a backwards-incompatible way. So, to avoid problems and confusion for clients, it’s a good idea to always 
implement some form of API versioning.There are two common approaches to doing this: 

1) By prefixing all URLs with your API version, like /v1/healthcheck or /v2/healthcheck.
2) By using custom Accept and Content-Type headers on requests and responses to convey the API version, like 
Accept: application/vnd.greenlight-v1.

From a HTTP semantics point of view, using headers to convey the API version is the ‘purer’ approach. But from a 
user-experience point of view, using a URL prefix is arguably better. It makes it possible for developers to see which 
version of the API is being used at a glance, and it also means that the API can still be explored using a regular web 
browser (which is harder if custom headers are required).
-------------------------------------------------------------------------------------------------------------------------
CONFLICTING RULES
It’s important to be aware that httprouter doesn’t allow conflicting routes which potentially match the same request. So, 
for example, you cannot register a route like GET /foo/new and another route with a parameter segment that conflicts with 
it — like GET /foo/:id.

If you’re using a standard REST structure for your API endpoints — like we will be in this book — then this restriction 
is unlikely to cause you many problems. In fact, it’s arguably a positive thing. Because conflicting routes aren’t allowed,
there are no routing-priority rules that you need to worry about, and it reduces the risk of bugs and unintended behavior 
in your application.

But if you do need to support conflicting routes (for example, you might need to replicate the endpoints of an existing 
API exactly for backwards-compatibility), then I would recommend taking a look at chi, Gorilla mux or flow instead. 
All of these are good routers which do permit conflicting routes.
-------------------------------------------------------------------------------------------------------------------------
CREATING AND EXECUTING MIGRATIONS (UP AND DOWN FILES)
migrate create -seq -ext=.sql -dir=./migrations create_users_table //To create a new pair of up and down migration files
//run above from greenlight-movie-api folder
migrate -path=./migrations -database=$GREENLIGHT_DB_DSN up //To run an up migration; DB_DSN is in env variables.
-------------------------------------------------------------------------------------------------------------------------
ACCOUNT ACTIVATION WORKFLOW
To give you an overview upfront, the account activation process will work like this:
- As part of the registration process for a new user we will create a cryptographically-secure random activation token 
that is impossible to guess.
- We will then store a hash of this activation token in a new tokens table, alongside the new user’s ID and an expiry time 
for the token.
- We will send the original (unhashed) activation token to the user in their welcome email.
- The user subsequently submits their token to a new PUT /v1/users/activated endpoint.
- If the hash of the token exists in the tokens table and hasn’t expired, then we’ll update the activated status for the 
relevant user to true.
- Lastly, we’ll delete the activation token from our tokens table so that it can’t be used again.
-------------------------------------------------------------------------------------------------------------------------
In this section of the book, you’ll learn how to:
- Implement a secure ‘account activation’ workflow which verifies a new user’s email address.
- Generate cryptographically-secure random tokens using Go’s crypto/rand and encoding/base32 packages.
- Generate fast hashes of data using the crypto/sha256 package.
- Implement patterns for working with cross-table relationships in your database, including setting up foreign keys and 
retrieving related data via SQL JOIN queries.
-------------------------------------------------------------------------------------------------------------------------
UNSERSTANDING CIRCULAR DEPENDENCIES
Noticing a pattern that helps me understand circular dependencies. A Method on a struct can call another method. e.g. in
the token package, the tokenModel.New method calls tokenModel.insert. We can say the New() method depends on the Insert()
method. We will however introduce a circular dependency if tokenModel.Insert() should include a call to tokenModel.New().
Logically, this doesn't make sense because if we call New(), New() calls Insert() and Insert() calls New() and we end up
in a spiral never-ending loop. Hence dependencies should only flow in one direction and not bi-directional. In the case
where the call to New() for example is not directly inside Insert() but in another function called by Insert(), it is very
easy to understand this, by imagining the external function unfolded inside the Insert() function. This way, it doesn't
matter how far removed from Insert() a call to New() is, by unfolding all functions inside Insert(), we can understand if
we have a circular dependency or not. In short, to avoid a circular dependency, Insert() can never call New() directly or 
call a fn which itself calls New() or any of its descendants calls New().
-------------------------------------------------------------------------------------------------------------------------
MATH/RAND AND CRYPTO/RAND FOR CRYPTOGRAPHY
Go also has a math/rand package which provides a deterministic pseudo-random number generator (PRNG). It’s important that 
you never use the math/rand package for any purpose where cryptographic security is required, such as generating tokens 
or secrets

In fact, it’s arguably best to use crypto/rand as standard practice. Only opt for using math/rand in specific scenarios 
where you are certain that a deterministic PRNG is acceptable, and you actively need the faster performance of math/rand.
